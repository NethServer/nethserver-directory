#!/usr/bin/perl

#
# NethServer Directory
#
# Update user(s) chage informations according to the current password
# policy.
#
# If the userName argument is missing, all known user accounts are
# considered.
#
# Copyright (C) 2012 Nethesis srl
#
# --- 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License or more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#

use strict;
use esmith::ConfigDB;
use esmith::db;
use NethServer::Database::Passwd;

my $event = shift || die "Event name argument missing.";
my $userName = shift;
my $PassExpires = shift || "yes";
my @users;

my $errors = 0;

if($userName) {
    @users = ($userName);
} else {
    @users = split(/,/, qx(/usr/libexec/nethserver/list-users | /usr/bin/jq -j '.|keys|join(",")'));
}

my %conf = ();
my $db = esmith::ConfigDB->open_ro();

my $policy = $db->get('passwordstrength');
if($policy) {
    %conf = $policy->props();
} else {
    die "[ERROR] No passwordstrength configuration found!\n";
}

foreach $userName (@users) {

    my $ldapAccount = $userName;
    if ($userName =~ /@/) {
        $ldapAccount = (split(/@/,$userName))[0];
    } else {
        my $domain = $db->get_value('DomainName');
        $userName = $userName.'@'.$domain
    }

    if( ! getpwnam($userName)) {
	# Skip if user is not in system passwd DB
	next;
    }

    if($conf{'PassExpires'} ne 'no' && ($PassExpires ne 'no')) {
        system("/usr/sbin/lchage",
            "-m", $conf{"MinPassAge"} || '0',
            "-M", $conf{"MaxPassAge"} || '180',
            "-W", $conf{"PassWarning"} || '7',
            $ldapAccount);
	if( $? != 0 ) {
	    warn "[ERROR] Cannot set password age infos for user `$userName`\n";
	    $errors ++;	    
	}
    } else {
        system(qw(/usr/sbin/lchage -m 0 -M 99999 -W 7), $ldapAccount);
	if( $? != 0 ) {
	    warn "[ERROR] Cannot remove password age infos for user `$userName`\n";
	    $errors ++;	    
	}
    }

}

exit(($errors > 0) ? 1 : 0);


