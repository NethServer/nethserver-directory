#!/usr/bin/perl

#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use NethServer::Directory;
use NethServer::Service;


#
# Restore backup if present
#
if ( ! -f '/var/lib/ldap/cn.bdb' ) { # first configuration
    if ( -s '/var/lib/nethserver/backup/ldap-config.ldif' ) { # backup is present and non-zero size
        system('/etc/e-smith/events/actions/nethserver-directory-restore-ldap');
    }
}

#
# Ensure slapd is running after a full stop/start
#
my $slapd = NethServer::Service->new('slapd');
if($slapd->is_running()) {
    $slapd->stop();
}
$slapd->start();

#
# Connect to LDAP server
#
my $count = 0;
my $ldap = undef;
while( ! ($ldap = NethServer::Directory->new()) &&  $count < 10) {
    warn("[NOTICE] waiting for slapd to become available.\n");
    sleep(1);
    $count ++;
}

if( ! $ldap) {
   die("Cannot connect LDAP server");
}

my $LdapInternalSuffix = NethServer::Directory::getInternalSuffix(); 
my $LdapDomainSuffix = NethServer::Directory::getDomainSuffix(); 
my $errors = 0;

#
# Configure server certificate file (default openldap-servers location)
#
my $CertificateFile = '/etc/pki/tls/certs/slapd.pem';

#
# Load missing modules
#

foreach my $dynModule (qw(rwm.la back_relay.la)) {

    my $olcModuleSearch = $ldap->search(
        base => 'cn=config',
        filter => "(&(cn=module{*})(olcModuleLoad={0}$dynModule))",
        attributes => ['olcModuleLoad']
        );

    if ($olcModuleSearch->count() == 0) {
        my $ldapAddResponse = $ldap->add(
            'cn=module,cn=config',
            attrs => [
                cn => 'module',
                objectClass => 'olcModuleList',
                olcModuleLoad => $dynModule
            ]
        );
        if($ldapAddResponse->is_error) {
            warn "`$dynModule` module load error";
            $errors ++;
        }
    }

}

#
# Replace some global settings, access control setup:
#
my @configChangeList = (    
    # FIXME: Updating TLS attributes may result in libuser client
    # connection problems. Here merge() will not touch unchanged
    # attributes:
    ['merge',
     'cn=config',
     attrs => [
	 olcPasswordCryptSaltFormat => '$6$%.86s',
	 olcTLSCACertificateFile => $CertificateFile,
	 olcTLSCertificateFile => $CertificateFile,
	 olcLogLevel => '0',
	 olcTLSCertificateKeyFile => $CertificateFile,
	 olcTLSVerifyClient => 'never',
	 # dummy value, see delete below:
	 olcTLSCACertificatePath => '/etc/openldap/certs',
	 olcTLSDHParamFile => '/etc/openldap/certs/slapd.dh.params.pem',
    ]],

    # Refs #1491. Remove attribute, if set.  On CentOS-6.3 nss cert DB
    # is used by default: fall back to our pem certificate:
    ['modify',
     'cn=config',
     delete => [
	 olcTLSCACertificatePath
     ]],
    
    ['modify',
     'olcDatabase={-1}frontend,cn=config',
     replace => [
	 olcPasswordHash => '{CRYPT}'
     ]],

    ['modify',
     'olcDatabase={2}hdb,cn=config',
     replace => [
         olcSuffix => $LdapInternalSuffix,
     ]]
    );


foreach(@configChangeList) {
    my @args = @{$_};
    my $method = shift @args;
    my $mergeResult = $ldap->$method(@args);
    if($mergeResult->is_error()) {
	warn 'Error modifying ' . $_->[1] . "\n";
	$errors ++;
    }
}

#
# Enable relay overlay 
# see man slapd-relay, man slapo-rwm
#
my $olcRelaySearch = $ldap->search(
    base => 'cn=config',
    scope => 'one',
    filter => '(olcDatabase={0}relay)',
    attributes => ['olcSuffix'],
    sizelimit => 1
    );

if($olcRelaySearch->count() == 0) {
    my $ldapAddRelayResponse = $ldap->add(
	'olcDatabase=relay,cn=config',
	attrs => [
	    objectClass => ['olcDatabaseConfig', 'olcRelayConfig', 'olcConfig'],
	    olcDatabase => 'relay',
	    olcSuffix => $LdapDomainSuffix
	]);
    if($ldapAddRelayResponse->is_error) {	
	warn 'Error adding "relay" backend database: ' . $ldapAddRelayResponse->error;
	$errors ++;
    } else {
	addOverlayRwm();
    }
} else {    
    # The relay has been configured, we need to update the domain
    # suffix only:
    $ldap->modify($olcRelaySearch->shift_entry()->dn(),
		  replace => {
		      olcSuffix => $LdapDomainSuffix
		  });		 
}


#
# Add the rewriter module to relay backend
#
sub addOverlayRwm
{

    my $olcRelaySearch = $ldap->search(
	base => 'cn=config',
	scope => 'one',
	filter => '(olcDatabase={0}relay)',
	attributes => ['olcSuffix'],
	sizelimit => 1
	);


    if($olcRelaySearch->count() == 0) {
	warn 'Cannot find the relay database';
	return
    }

    #
    # Search for existing rwm overlay configurations:
    #
    my $relayDnSuffix = $olcRelaySearch->entry(0)->dn();
    my $olcOverlaySearch = $ldap->search(
	base => $relayDnSuffix,
	scope => 'one',
	filter => 'objectClass=olcRwmConfig',
	sizelimit => 1
	);

    if($olcOverlaySearch->count() == 0) {

	my $ldapAddOverlayResponse = $ldap->add(
	    'olcOverlay=rwm,' . $relayDnSuffix,
	    attrs => [
		objectClass => ['olcOverlayConfig', 'olcRwmConfig'],
		olcOverlay => 'rwm',
		olcRwmRewrite => 'rwm-suffixmassage "dc=directory,dc=nh"'
		]
	    );
	if($ldapAddOverlayResponse->is_error) {
	    warn "Error adding rewrite module overlay on `$relayDnSuffix`: " . 
		$ldapAddOverlayResponse;
	    $errors ++;
	}

    }
}

# Force root access initialization for userPassword and other
# attributes.  This grant is required by
# nethserver-directory-dit-setup to modify HDB backend contents:
$ldap->enforceAccessDirective('', '*');
$ldap->enforceAccessDirective('', 'userPassword');

exit($errors == 0 ? 0 : 1);
