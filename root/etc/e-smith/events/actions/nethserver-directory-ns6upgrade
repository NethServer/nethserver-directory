#!/bin/bash

#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

# Exit on error
set -e

function cleanup_acl ()
{
    # Clean up temporary props on nsdc service record:
    /sbin/e-smith/config delprop nsdc TCPPort access

    # Remove read access to everyone:
    ldapmodify -Y EXTERNAL -H ldapi:/// <<'EOF'
dn: olcDatabase={-1}frontend,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=extern
 al,cn=auth" manage by * none
EOF
}

# Safety-check: has the nsdc IP been set?
if [[ -z $(/sbin/e-smith/config getprop nsdc IpAddress) ]]; then
    echo "[ERROR] nsdc IpAddress was not set. Cannot start nsdc container."
    exit 1
fi

yum --skip-broken --downloadonly -y --disableplugin=nethserver_events install nethserver-dc

# Drop this package
yum -y --disableplugin=nethserver_events remove nethserver-directory

# Clean up DB, like it has never been installed
/sbin/e-smith/config delete slapd
/sbin/e-smith/config setprop sssd LdapURI '' Provider none status disabled

# Clean up sssd configuration
/sbin/e-smith/signal-event nethserver-sssd-leave

# Install nethserver-dc without running runlevel-adjust and firewall-adjust:
# the slapd service must be running and its TCP port must be open
yum -y --disableplugin=nethserver_events install nethserver-dc

/sbin/e-smith/signal-event nethserver-dc-update

# Pre-select ns6upgrade provisioning procedure
/sbin/e-smith/config setprop nsdc ProvisionType ns6upgrade status enabled TCPPort 389 access green

# Grant read access to everyone (samba-tool provisioning procedure workaround):
ldapmodify -Y EXTERNAL -H ldapi:/// <<'EOF'
dn: olcDatabase={-1}frontend,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=extern
 al,cn=auth" manage by * read
EOF

trap cleanup_acl ERR

# Make sure LDAP port is open for classic upgrade
iptables -I INPUT 1 -p tcp --dport 389 -j ACCEPT

# Fix locked user and missing display names
perl <<'PERL'
use Net::LDAP;
use Authen::SASL;
use strict;

my $nsDirectory = Net::LDAP->new('ldapi://');
my $sasl = Authen::SASL->new(mechanism => 'EXTERNAL');
$nsDirectory->bind(anonymous => 0, sasl => $sasl);

my @updateNodes = $nsDirectory->search(
    base => 'ou=People,dc=directory,dc=nh',
    filter => '(&(uid=*)(objectClass=posixAccount)(objectClass=inetOrgPerson))',
    scope => 'one',
    )->entries;

my @reservedAccounts = qw(
    administrator
    guest
    krbtgt
);

foreach(@updateNodes) {
    my $uid = $_->get_value('uid');

    if(grep { lc($uid) eq $_ } @reservedAccounts) {
        warn "[WARNING] Drop reserved account $uid\n";
        $_->delete();
        $_->update($nsDirectory);
        next;
    }

    my $displayName = $_->get_value('displayName');
    my $cn = $_->get_value('cn');
    if (!defined($displayName)) {
        print "[NOTICE] Adding displayName to user '$uid'\n";
        $_->add('displayName' => $cn);
    } elsif ($displayName ne $cn) {
        print "[NOTICE] Updating displayName for user '$uid'\n";
        $_->replace('displayName' => $cn);
    }
    my $password = $_->get_value('userPassword');
    my $flags = $_->get_value('sambaAcctFlags') || undef;
    # user is locked and it's a Samba user
    if($password =~ /\{CRYPT\}\!+/ && defined($flags) && $flags !~ /D/) {
        print "[NOTICE] Fixing locking flag for user '$uid'\n";
        $_->replace('sambaAcctFlags' => "[DU         ]");
    }
    # user is not configured for Samba
    my @objClasses = $_->get_value('objectClass');
    if ( ! grep { "sambaSamAccount" eq $_ } @objClasses ) {
        open(my $fh, '>>', '/var/run/lost_users');
        print $fh "$uid\n";
        close($fh);
    }
    $_->update($nsDirectory);
}
PERL

/sbin/e-smith/signal-event nethserver-dc-save

# Re-create users without Samba
if [ -f /var/run/lost_users ]; then
    for user in $(cat /var/run/lost_users)
    do
        /sbin/e-smith/signal-event user-create $user "Migrated $user"
    done
fi

# Lock the administrator account
/etc/e-smith/events/actions/nethserver-dc-user-lock ${1:-ns6upgrade} "administrator@$(hostname -d)"

#
# If provisioning is OK, stop slapd and disable it at boot
#

if systemctl -q is-enabled slapd; then
    systemctl disable slapd
fi

cleanup_acl

if systemctl -q is-active slapd; then
    systemctl stop slapd
fi

